"""
Gerador de Excel para Extract Fotos
Respons√°vel por criar planilhas Excel organizadas com os dados extra√≠dos
"""

import pandas as pd
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
from openpyxl.utils.dataframe import dataframe_to_rows
from typing import List, Dict, Optional
from datetime import datetime
import os

# Importa as classes do parser
from parser import FileInfo, CondominioType

class ExcelGenerator:
    """Gerador de planilhas Excel para dados de condom√≠nios"""
    
    def __init__(self):
        """Inicializa o gerador de Excel"""
        self.workbook = None
        self.worksheet = None
        
        # Cores para formata√ß√£o
        self.header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
        self.header_font = Font(color="FFFFFF", bold=True)
        self.border = Border(
            left=Side(style='thin'),
            right=Side(style='thin'),
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )
    
    def create_excel_from_files(self, files_info: List[FileInfo], output_filename: str = None) -> str:
        """
        Cria planilha Excel a partir dos dados dos arquivos
        
        Args:
            files_info: Lista de FileInfo processados
            output_filename: Nome do arquivo de sa√≠da (opcional)
            
        Returns:
            Nome do arquivo Excel gerado
        """
        if not output_filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_filename = f"extract_fotos_{timestamp}.xlsx"
        
        # Cria o workbook e worksheet
        self.workbook = Workbook()
        self.worksheet = self.workbook.active
        self.worksheet.title = "Dados Extra√≠dos"
        
        # Determina o tipo de condom√≠nio baseado nos dados
        condominio_type = self._determine_condominio_type(files_info)
        
        # Cria o DataFrame
        df = self._create_dataframe(files_info, condominio_type)
        
        # Adiciona dados ao Excel
        self._add_data_to_worksheet(df)
        
        # Aplica formata√ß√£o
        self._apply_formatting(condominio_type)
        
        # Adiciona estat√≠sticas
        self._add_statistics_sheet(files_info)
        
        # Salva o arquivo
        self.workbook.save(output_filename)
        print(f"‚úÖ Planilha Excel criada: {output_filename}")
        
        return output_filename
    
    def _determine_condominio_type(self, files_info: List[FileInfo]) -> CondominioType:
        """Determina o tipo de condom√≠nio baseado nos dados"""
        valid_files = [f for f in files_info if f.is_valid]
        
        if not valid_files:
            return CondominioType.COM_BLOCOS  # Default
        
        # Verifica se h√° arquivos com blocos
        has_blocks = any(f.condominio_type == CondominioType.COM_BLOCOS for f in valid_files)
        
        if has_blocks:
            return CondominioType.COM_BLOCOS
        else:
            return CondominioType.SEM_BLOCOS
    
    def _create_dataframe(self, files_info: List[FileInfo], condominio_type: CondominioType) -> pd.DataFrame:
        """Cria DataFrame pandas com os dados organizados"""
        data = []
        
        for file_info in files_info:
            if not file_info.is_valid:
                continue
                
            row = {
                'Nome do Arquivo': file_info.filename,
                'Apartamento': file_info.apartamento,
                'Leitura': file_info.leitura
            }
            
            # Adiciona coluna de bloco se necess√°rio
            if condominio_type == CondominioType.COM_BLOCOS:
                row['Bloco'] = file_info.bloco if file_info.bloco else 'N/A'
            
            data.append(row)
        
        # Cria DataFrame
        df = pd.DataFrame(data)
        
        # Reorganiza colunas
        if condominio_type == CondominioType.COM_BLOCOS:
            df = df[['Nome do Arquivo', 'Bloco', 'Apartamento', 'Leitura']]
        else:
            df = df[['Nome do Arquivo', 'Apartamento', 'Leitura']]
        
        return df
    
    def _add_data_to_worksheet(self, df: pd.DataFrame):
        """Adiciona dados do DataFrame ao worksheet"""
        # Adiciona cabe√ßalho
        for col_num, column_title in enumerate(df.columns, 1):
            cell = self.worksheet.cell(row=1, column=col_num, value=column_title)
            cell.font = self.header_font
            cell.fill = self.header_fill
            cell.alignment = Alignment(horizontal="center", vertical="center")
            cell.border = self.border
        
        # Adiciona dados
        for row_num, row_data in enumerate(dataframe_to_rows(df, index=False, header=False), 2):
            for col_num, value in enumerate(row_data, 1):
                cell = self.worksheet.cell(row=row_num, column=col_num, value=value)
                cell.border = self.border
                cell.alignment = Alignment(horizontal="center", vertical="center")
    
    def _apply_formatting(self, condominio_type: CondominioType):
        """Aplica formata√ß√£o ao worksheet"""
        # Ajusta largura das colunas
        column_widths = {
            'Nome do Arquivo': 30,
            'Bloco': 10,
            'Apartamento': 15,
            'Leitura': 15
        }
        
        for col_num, column_title in enumerate(self.worksheet[1], 1):
            if column_title.value in column_widths:
                self.worksheet.column_dimensions[column_title.column_letter].width = column_widths[column_title.value]
        
        # Remove coluna de bloco se n√£o for necess√°ria
        if condominio_type == CondominioType.SEM_BLOCOS:
            # Encontra a coluna do bloco e remove
            for col_num, column_title in enumerate(self.worksheet[1], 1):
                if column_title.value == 'Bloco':
                    self.worksheet.delete_cols(col_num)
                    break
    
    def _add_statistics_sheet(self, files_info: List[FileInfo]):
        """Adiciona planilha de estat√≠sticas"""
        stats_ws = self.workbook.create_sheet("Estat√≠sticas")
        
        # Calcula estat√≠sticas
        total_files = len(files_info)
        valid_files = sum(1 for f in files_info if f.is_valid)
        invalid_files = total_files - valid_files
        
        # Estat√≠sticas por tipo
        with_blocks = sum(1 for f in files_info if f.condominio_type == CondominioType.COM_BLOCOS and f.is_valid)
        without_blocks = sum(1 for f in files_info if f.condominio_type == CondominioType.SEM_BLOCOS and f.is_valid)
        
        # Dados para estat√≠sticas
        stats_data = [
            ["M√©trica", "Valor"],
            ["Total de Arquivos", total_files],
            ["Arquivos V√°lidos", valid_files],
            ["Arquivos Inv√°lidos", invalid_files],
            ["COM Blocos", with_blocks],
            ["SEM Blocos", without_blocks],
            ["Taxa de Sucesso", f"{(valid_files/total_files*100):.1f}%" if total_files > 0 else "0%"],
            ["", ""],
            ["Data de Gera√ß√£o", datetime.now().strftime("%d/%m/%Y %H:%M:%S")],
            ["Arquivos com Erro", ""]
        ]
        
        # Adiciona arquivos com erro
        error_files = [f.filename for f in files_info if not f.is_valid]
        for error_file in error_files:
            stats_data.append(["", error_file])
        
        # Adiciona dados ao worksheet
        for row_num, row_data in enumerate(stats_data, 1):
            for col_num, value in enumerate(row_data, 1):
                cell = stats_ws.cell(row=row_num, column=col_num, value=value)
                
                # Formata cabe√ßalho
                if row_num == 1:
                    cell.font = self.header_font
                    cell.fill = self.header_fill
                
                cell.border = self.border
        
        # Ajusta largura das colunas
        stats_ws.column_dimensions['A'].width = 25
        stats_ws.column_dimensions['B'].width = 30

# Fun√ß√£o de conveni√™ncia para uso direto
def generate_excel_report(files_info: List[FileInfo], output_filename: str = None) -> str:
    """
    Fun√ß√£o simples para gerar relat√≥rio Excel
    
    Args:
        files_info: Lista de FileInfo processados
        output_filename: Nome do arquivo de sa√≠da (opcional)
        
    Returns:
        Nome do arquivo Excel gerado
    """
    generator = ExcelGenerator()
    return generator.create_excel_from_files(files_info, output_filename)

if __name__ == "__main__":
    # Teste b√°sico da classe
    print("üß™ Testando Excel Generator...")
    
    # Cria dados de teste
    from parser import FileInfo, CondominioType
    
    test_files = [
        FileInfo("A-101-1234.jpg", CondominioType.COM_BLOCOS, "A", "101", "1234", True),
        FileInfo("B-205-5678.png", CondominioType.COM_BLOCOS, "B", "205", "5678", True),
        FileInfo("101-1234.jpg", CondominioType.SEM_BLOCOS, None, "101", "1234", True),
        FileInfo("205-5678.png", CondominioType.SEM_BLOCOS, None, "205", "5678", True),
        FileInfo("invalid-name.txt", CondominioType.COM_BLOCOS, None, None, None, False, "Padr√£o inv√°lido")
    ]
    
    try:
        # Gera relat√≥rio
        output_file = generate_excel_report(test_files, "teste_extract_fotos.xlsx")
        print(f"‚úÖ Relat√≥rio de teste gerado: {output_file}")
        
        # Verifica se o arquivo foi criado
        if os.path.exists(output_file):
            print(f"üìÅ Arquivo criado com sucesso: {os.path.getsize(output_file)} bytes")
        else:
            print("‚ùå Erro: Arquivo n√£o foi criado")
            
    except Exception as e:
        print(f"‚ùå Erro durante teste: {e}")
